{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws/이미지업로드_슬랙봇/","result":{"data":{"site":{"siteMetadata":{"title":"어서오세요, 샨낌의 서재입니다.","author":"Syankkim","siteUrl":"https://syankkim.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"ksso7300"}}},"markdownRemark":{"id":"d36f8ac6-d2d1-5963-a1ac-b67872dd8c99","excerpt":"S3 이미지 업로드 슬랙봇 만들기 with Lambda S3 bucket으로 이미지를 업로드 할 수 있는 슬랙봇이 필요하다는 요청을 받았습니다. 이미지를 업로드하고 비개발자 분이 이미지 태그를 사용할 수 있도록 생성해주는 기능이 필요했죠. 슬랙봇을 처음 만들어 봤지만, 플랫폼 개발과는 다른 재미가 있더라구요. 슬랙봇 완성본 아래 완성본을 먼저 보여드립니다. 채널에 이미지를 올리면 “업로드 요청중이니다. 기다려주세요!” \n문구가 스레드에 찍히고 S3 에 이미지 업로드를 완료 후, \nS…","html":"<h1 id=\"s3-이미지-업로드-슬랙봇-만들기-with-lambda\" style=\"position:relative;\"><a href=\"#s3-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%8A%AC%EB%9E%99%EB%B4%87-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-lambda\" aria-label=\"s3 이미지 업로드 슬랙봇 만들기 with lambda permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S3 이미지 업로드 슬랙봇 만들기 with Lambda</h1>\n<p>S3 bucket으로 이미지를 업로드 할 수 있는 슬랙봇이 필요하다는 요청을 받았습니다.</p>\n<p>이미지를 업로드하고 비개발자 분이 이미지 태그를 사용할 수 있도록 생성해주는 기능이 필요했죠.</p>\n<p>슬랙봇을 처음 만들어 봤지만, 플랫폼 개발과는 다른 재미가 있더라구요.</p>\n<h2 id=\"슬랙봇-완성본\" style=\"position:relative;\"><a href=\"#%EC%8A%AC%EB%9E%99%EB%B4%87-%EC%99%84%EC%84%B1%EB%B3%B8\" aria-label=\"슬랙봇 완성본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>슬랙봇 완성본</h2>\n<p>아래 완성본을 먼저 보여드립니다.</p>\n<p>채널에 이미지를 올리면 “업로드 요청중이니다. 기다려주세요!” </br>\n문구가 스레드에 찍히고 S3 에 이미지 업로드를 완료 후, </br>\nS3업로드 된 <strong>이미지의 uuid cloudfront prefix 주소, width, height 정보가 담긴 태그를 남겨줍니다.</strong> </br>\n필요에 따라 슬랙 <code class=\"language-text\">block_actions</code> 이벤트를 통해 이미지 링크와 설명 태그도 추가 가능하도록 했습니다. </br>\n여러개의 파일을 올려도 동작합니다.</p>\n<img width=\"600\" alt=\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2023-01-24 &#x110B;&#x1169;&#x1112;&#x116E; 6 16 20\" src=\"https://user-images.githubusercontent.com/28856435/214256819-e35ce316-a92d-46e6-8d42-def26e1935fd.png\">\n<hr>\n<p>만약 S3 업로드에 성공한 파일이 없다면 아래와 같이 보여줍니다.\n자세한 오류는 로그를 남기도록 했어요.</p>\n<img width=\"400\" alt=\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2023-01-28 &#x110B;&#x1169;&#x1112;&#x116E; 2 34 06\" src=\"https://user-images.githubusercontent.com/98014209/215248037-eaa505f1-25c8-4946-a999-8ad07741434f.png\">\n<h2 id=\"고민-배웠던-점들\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC-%EB%B0%B0%EC%9B%A0%EB%8D%98-%EC%A0%90%EB%93%A4\" aria-label=\"고민 배웠던 점들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민, 배웠던 점들</h2>\n<p>구현된 내용은 아래에 있지만, 슬랙봇을 처음 만들어보면서 부딪혔던 일들을 먼저 기록해두려 해요.</p>\n<h3 id=\"1-이미지를-다운받기-위한-url\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%8B%A4%EC%9A%B4%EB%B0%9B%EA%B8%B0-%EC%9C%84%ED%95%9C-url\" aria-label=\"1 이미지를 다운받기 위한 url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 이미지를 다운받기 위한 url</h3>\n<p>아래 코드를 사용해서 이미지를 다운 받을 수 있는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">urllib<span class=\"token punctuation\">.</span>reqeust<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span><span class=\"token string\">\"이미지 주소\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"저장 할 파일이름\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이미지 주소가 <span style='color: tomato;'>다운로드가 가능한 주소</span>가 아니라면, 위 코드에서도 동작하지 않았어요.</br> 해당 url 을 ‘public permalink’ 필드에서 가져올 수는 있었지만, 다운로드가 가능한 주소가 아니었죠. </br>\n💡 </br>그래서 <code class=\"language-text\">request.get(url).content</code> 로 해당 링크의 리소스를 가져와, 다운로드 가능한 주소를 추출해냈습니다. </br></p>\n<hr>\n<h3 id=\"2-람다의-임시저장-스토리지\" style=\"position:relative;\"><a href=\"#2-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EC%9E%84%EC%8B%9C%EC%A0%80%EC%9E%A5-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\" aria-label=\"2 람다의 임시저장 스토리지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 람다의 임시저장 스토리지</h3>\n<p>로컬에서는 원하는 디렉토리에 다운받은 이미지를 임시저장할 수 있었어요. 그런데, 람다에서는 아무 디렉토리나 생성하거나 읽을 수 있는 권한이 없어서 또 다른 문제에 봉착했습니다.</br>\n💡 </br>알고보니, 람다에서는 파일을 읽거나 저장할 수 있는 로컬 스토리지로 <span style='color: tomato;'>/tmp</span> 영역만을 제공해주고 있었어요.\n이 영역은 람다 실행환경의 수명동안 보존된다고 합니다.</p>\n<hr>\n<h3 id=\"3-슬랙에서의-중복-request\" style=\"position:relative;\"><a href=\"#3-%EC%8A%AC%EB%9E%99%EC%97%90%EC%84%9C%EC%9D%98-%EC%A4%91%EB%B3%B5-request\" aria-label=\"3 슬랙에서의 중복 request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 슬랙에서의 중복 Request</h3>\n<p>이미지를 올렸으면, 한번의 Request로 람다 함수도 한번만 호출되면 되는 일인데, 중복으로 5번 이상 요청이 계속해서 들어오는 문제가 있었습니다.</p>\n<p>그래서 공식문서에서 찾아낸 사실은, 실패한 요청을 최대 3번 재요청 한다는 것이었습니다. </br>\n<a href=\"https://api.slack.com/apis/connections/events-api#retries\">Slack Event API: Retries</a> 이 링크를 참고하면, 여러 실패원인을 규정하고 있는데, 제가 받은 요청 본문에 포함된 원인은 <code class=\"language-text\">http_timeout</code> 이 대부분 이었고,\n“Your server took longer than 3 seconds to respond to the previous event delivery attempt.” 이렇게 규정하고 있었습니다. </br>\n이미지 업로드 람다 함수는 계속 3초 이상이 걸렸던 것이지요 😇 이러한 중복 요청을 막으려면 요청 헤더에 아래 필드를 포함해 주면 된다고 기재되어 있어 추가해줬지만, 해결되지 않았습니다. 😭 (아마, 3초안에 응답받지 못해서 저 헤더값도 인식되지 않은것이 아닌가.. 추측합니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">X-Slack-No-Retry: 1</code></pre></div>\n<p>💡 </br>\n중복으로 요청이 들어올 때 헤더 값을 잘 살펴보니, <code class=\"language-text\">X-Slack-Retry-Num</code> 이라는 필드를 들고 들어오더라구요.</br>\n그래서 결국에는 요 필드가 없을 경우에만 처리하도록 했더니, 원하는대로 딱 한 번의 첫 요청만 처리되게 하는데 성공했습니다. 어쨌든 응답 헤더값에 <code class=\"language-text\">X-Slack-No-Retry': 1</code> 도 추가해줬어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> req_header<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'X-Slack-Retry-Num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'The event already processed'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'X-Slack-No-Retry'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"구조-설계\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0-%EC%84%A4%EA%B3%84\" aria-label=\"구조 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조 설계</h2>\n<p>파일 업로드 동작을 슬랙봇이 감지하여 수행되는 방식이며,\n아래와 같은 구조로 다음 동작을 기대하고 진행했습니다.</p>\n<img width=\"500\" alt=\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2023-01-24 &#x110B;&#x1169;&#x1112;&#x116E; 5 54 02\" src=\"https://user-images.githubusercontent.com/28856435/214249254-17009062-5410-4394-99b2-b812134920fd.png\">\n<ol>\n<li>채널에 이미지 업로드</li>\n<li>파일 업로드 감지, 슬랙 이벤트 API <code class=\"language-text\">Lambda function</code> 호출</li>\n<li>람다 함수에서 체크이미지 다운 및 <code class=\"language-text\">S3</code> 업로딩</li>\n<li>업로드 성공 후, 슬랙 이미지 스레드에 이미지 정보 답변</li>\n</ol>\n<h2 id=\"sam-serverless-application-model-with-python\" style=\"position:relative;\"><a href=\"#sam-serverless-application-model-with-python\" aria-label=\"sam serverless application model with python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[SAM] Serverless Application Model (with python)</h2>\n<p><code class=\"language-text\">SAM</code> 이란, 서버리스 애플리케이션 구축을 위한 오픈 소스 프레임워크입니다. </br>\n저는 이 슬랙봇을 작동시킬 람다 함수를 SAM 을 이용하여 구현했습니다.</br></p>\n<p>AWS CloudFormation template 의 확장 기능입니다. SAM template 배포 과정에서 CloudFormation template 구문으로 재해석되어 배포된다고 합니다.</p>\n<blockquote>\n<p>CloudFormation? AWS 리소스를 자동으로 생성해주는 서비스.</p>\n</blockquote>\n<p>SAM으로 구축가능한 AWS 서비스의 종류는 아래와 같아요.</p>\n<ul>\n<li>Lambda</li>\n<li>API Gateway</li>\n<li>DynamoDB</li>\n</ul>\n<p><code class=\"language-text\">SAM CLI</code>를 통해 local 환경에서의 개발 및 테스트가 가능합니다.</p>\n<blockquote>\n<p>SAM CLI? SAM 기반 application 구축을 지원하는 명령줄 인터페이스입니다.</p>\n</blockquote>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/install-sam-cli.html\">AWS SAM CLI 설치 공식문서</a> 👈🏻</p>\n<h2 id=\"slack-event-subscriptions-에서-endpoint-인증\" style=\"position:relative;\"><a href=\"#slack-event-subscriptions-%EC%97%90%EC%84%9C-endpoint-%EC%9D%B8%EC%A6%9D\" aria-label=\"slack event subscriptions 에서 endpoint 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Slack] Event Subscriptions 에서 Endpoint 인증</h2>\n<p>아래는 Request URL 인증 전에 선행되어야 하는 작업들입니다.</p>\n<ol>\n<li><a href=\"https://api.slack.com/\">slack api</a> 에서 앱 생성</li>\n<li><code class=\"language-text\">OAuth &amp; Permissions</code> 에서 권한 설정을 하거나 </br>\n아래 이미지를 참고하여 <code class=\"language-text\">App Manifest</code> 에 추가해줘도 좋습니다.</li>\n</ol>\n<p>             \n<img width=\"400\" alt=\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2023-01-24 &#x110B;&#x1169;&#x1112;&#x116E; 5 49 57\" src=\"https://user-images.githubusercontent.com/28856435/214248252-58167532-1dc9-4ab7-b02d-b3b9b0796123.png\"></p>\n<ul>\n<li>Lambda 함수 생성, AWS Gateway 추가</li>\n</ul>\n</br>\n<ol start=\"3\">\n<li>Request URL 인증 </br>\n<code class=\"language-text\">Event Subscription</code>에 이미지 다운/업로드 기능이 구현된 람다 함수의 <code class=\"language-text\">API Gateway</code> 를\n인증을 완료해야 해당 API가 호출됩니다.\n여기서 요구하는 응답 형식이 있는데, request body 로부터 받은 <code class=\"language-text\">challenge</code> 파라미터를 포함하여 리턴 해줘야\n인증에 성공할 수 있습니다. </br>\n✅ <a href=\"https://api.slack.com/events/url_verification\">슬랙 이벤트 타입 url_verification 문서</a> 를 참고해주세요.</li>\n</ol>\n<p>             \n<img width=\"400\" alt=\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2023-01-24 &#x110B;&#x1169;&#x1112;&#x116E; 6 02 38\" src=\"https://user-images.githubusercontent.com/28856435/214250768-0fffa2c5-1ae6-4a07-af80-352238cd0bcd.png\"></p>\n<p>python으로 구현한 예시 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">verify_url</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># challenge 파라미터가 있을 때 응답값에 포함하여 리턴</span>\n    <span class=\"token keyword\">if</span> body<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"challenge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"challenge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lambda_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Received event:\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>event<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    req_body <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span>\n    event_type <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> event_type <span class=\"token operator\">==</span> <span class=\"token string\">'url_verification'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> verify_url<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"slack-파일-업로드-이벤트-s3에-업로드하기\" style=\"position:relative;\"><a href=\"#slack-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-s3%EC%97%90-%EC%97%85%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0\" aria-label=\"slack 파일 업로드 이벤트 s3에 업로드하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Slack] 파일 업로드 이벤트, S3에 업로드하기</h2>\n<h3 id=\"main-fucntion\" style=\"position:relative;\"><a href=\"#main-fucntion\" aria-label=\"main fucntion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main fucntion</h3>\n<p>파일이나 이미지를 업로드 했을 때의 이벤트 타입 (request body.type) 은 <code class=\"language-text\">event_callback</code> 입니다.\nlambda_handler에서 이벤트에 따라 기능이 수행되도록 했어요.</p>\n<blockquote>\n<p>사용된 slack event types</p>\n<ul>\n<li>url_verification : Request URL 인증</li>\n<li>event_callback : 파일, 이미지 업로드</li>\n<li>block_actions : 버튼 클릭</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">lambda_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Received event:\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>event<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    req_header <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">)</span>\n    req_body <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> req_header<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'X-Slack-Retry-Num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'The event already processed'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'X-Slack-No-Retry'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    body <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>req_body<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> body<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> VERIFICATION_TOKEN<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'Unauthorized token.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'Unauthorized token'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">401</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'X-Slack-No-Retry'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 이벤트 타입별 처리</span>\n    event_type <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> event_type <span class=\"token operator\">==</span> <span class=\"token string\">'url_verification'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> verify_url<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> event_type <span class=\"token operator\">==</span> <span class=\"token string\">'event_callback'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> upload_image<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 이미지 업로드</span>\n    <span class=\"token keyword\">elif</span> event_type <span class=\"token operator\">==</span> <span class=\"token string\">'block_actions'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> add_tags<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 버튼 클릭시 태그추가</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'The event handler not found.: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>event_type<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'The event handler not found.'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'X-Slack-No-Retry'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"upload_image-함수에서-하는일\" style=\"position:relative;\"><a href=\"#upload_image-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%ED%95%98%EB%8A%94%EC%9D%BC\" aria-label=\"upload_image 함수에서 하는일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>upload_image 함수에서 하는일</h3>\n<ul>\n<li><code class=\"language-text\">event</code> 필드에서 파일 object 들을 가져옵니다.</li>\n<li>파일이 슬랙봇과 공유되기 위해서는 <code class=\"language-text\">files_sharedPublicURL()</code> 함수를 사용합니다.</li>\n<li>이미지 확장자도 확인 후,</li>\n<li><code class=\"language-text\">permalink_public</code> 필드 주소를 가져옵니다. </br></li>\n<li>tmp에 이미지 저장: urllib.reqeust.urlretrieve(“이미지 주소”, “저장 할 파일이름”) </br></li>\n<li>S3에 업로드를 수행하고,</li>\n<li>마지막으로 스레드에 업로드한 이미지 태그 만들어 남겨주도록 했습니다.</li>\n</ul>\n</br>\n<details>\n<summary style=\"cursor: pointer; color: #999\">► [OPEN!] upload_image 함수 확인하기</summary>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">upload_image</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    slack_event <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> slack_event<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        client<span class=\"token punctuation\">.</span>chat_postMessage<span class=\"token punctuation\">(</span>channel<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'channel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_ts<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token string\">'업로드 요청중입니다. 기다려주세요! :meow_noddies:'</span><span class=\"token punctuation\">)</span>\n        files <span class=\"token operator\">=</span> slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">]</span>\n        file_arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n            _file <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 파일을 bot과 공유</span>\n                client<span class=\"token punctuation\">.</span>files_sharedPublicURL<span class=\"token punctuation\">(</span>token<span class=\"token operator\">=</span>SLACK_USER_TOKEN<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channels<span class=\"token operator\">=</span>CHANNEL_ID<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Failed to share file publicly: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">pass</span>\n\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                local_file_name <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n                local_file_path <span class=\"token operator\">=</span> tmp_path <span class=\"token operator\">+</span> local_file_name\n                <span class=\"token comment\"># 이미지 확장자 확인</span>\n                plain_name<span class=\"token punctuation\">,</span> ext <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>local_file_name<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> ext <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.gif'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invalid extension.: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ext<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n                download_url <span class=\"token operator\">=</span> get_image_url<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'permalink_public' 주소를 가져옴</span>\n                <span class=\"token comment\"># tmp에 이미지 저장 : urllib.reqeust.urlretrieve(\"이미지 주소\", \"저장 할 파일이름\")</span>\n                urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>download_url<span class=\"token punctuation\">,</span> local_file_path<span class=\"token punctuation\">)</span>\n                file_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>uuid<span class=\"token punctuation\">.</span>uuid4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n                <span class=\"token comment\"># S3 업로드</span>\n                upload_S3_bucket<span class=\"token punctuation\">(</span>local_file_name<span class=\"token punctuation\">,</span> file_name<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>local_file_name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> fail to uploading.: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                _file <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'width'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token string\">'original_w'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'height'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token string\">'original_h'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'origin_name'</span><span class=\"token punctuation\">:</span> local_file_name <span class=\"token punctuation\">}</span>\n                file_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>_file<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>file_arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> file_arr<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    client<span class=\"token punctuation\">.</span>chat_postMessage<span class=\"token punctuation\">(</span>channel<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'channel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_ts<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> blocks<span class=\"token operator\">=</span>response_blocks<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>local_file_name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> fail to uploading.: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n                    client<span class=\"token punctuation\">.</span>chat_postMessage<span class=\"token punctuation\">(</span>channel<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'channel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_ts<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token string\">'업로드 실패 :smiling_face_with_tear:'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            client<span class=\"token punctuation\">.</span>chat_postMessage<span class=\"token punctuation\">(</span>channel<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'channel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_ts<span class=\"token operator\">=</span>slack_event<span class=\"token punctuation\">[</span><span class=\"token string\">'ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token string\">'업로드된 파일이 없습니다. :smiling_face_with_tear:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'X-Slack-No-Retry'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</details>\n</br>\n<hr>\n</br>\n</br>\n</br>\n</br>\n<p>긴 글 읽어주셔서 감사합니다! 도움이 되었다면 댓글을 남겨주세요 😄</p>\n<blockquote>\n<p>전체 코드는 <a href=\"https://github.com/syankkim/image_upload_bot\">image-upload-bot</a> 레포지토리에서 확인 가능합니다.</p>\n</blockquote>","frontmatter":{"title":"[슬랙봇 만들기] Image upload to S3 using Lambda","date":"January 24, 2023"}}},"pageContext":{"slug":"/aws/이미지업로드_슬랙봇/","previous":{"fields":{"slug":"/OS/운영체제-기능목적구조/"},"frontmatter":{"title":"⚙️ [운영체제] 기능,목적,구조"}},"next":null}}}